# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe('/member_notifications', type: :request) do
  # This should return the minimal set of attributes required to create a valid
  # MemberNotification. As you add validations to MemberNotification, be sure to
  # adjust the attributes here as well.

  before do
    @valid_notification = Notification.create!(
      title: 'Test notification',
      description: 'A test description',
      date: Time.zone.today
    )

    Rails.application.load_seed

    # Setup mock OmniAuth user
    OmniAuth.config.test_mode = true
    OmniAuth.config.mock_auth[:google_oauth2] = OmniAuth::AuthHash.new({
      provider: 'google_oauth2',
      uid: '123456789',
      info: {
        email: 'john@tamu.edu',
        first_name: 'John',
        last_name: 'Doe',
        image: 'https://example.com/image.jpg'
      },
      credentials: {
        token: 'token',
        refresh_token: 'refresh token',
        expires_at: DateTime.now
      }
    }
                                                                      )

    get member_google_oauth2_omniauth_callback_path

    @valid_member = Member.find_by(email: 'john@tamu.edu')
  end

  let(:valid_attributes) do
    {
      member_id: Member.find_by(email: 'john@tamu.edu').id,
      notification_id: Notification.find_by(title: 'Test notification').id,
      seen: false
    }
  end

  let(:invalid_attributes) do
    {
      member_id: nil,
      notification_id: Notification.find_by(title: 'Test notification').id,
      seen: '7'
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      MemberNotification.create!(valid_attributes)
      get '/member_notifications'
      expect(response).to(be_successful)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      member_notification = MemberNotification.create!(valid_attributes)
      get member_notification_url(member_notification)
      expect(response).to(be_successful)
    end
  end

  # No new because we never go to that path directly

  describe 'GET /edit' do
    it 'renders a successful response' do
      member_notification = MemberNotification.create!(valid_attributes)
      get edit_member_notification_url(member_notification)
      expect(response).to(be_successful)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new MemberNotification' do
        expect do
          post(member_notifications_url, params: { member_notification: valid_attributes })
        end.to(change(MemberNotification, :count).by(1))
      end

      it 'redirects to the created member_notification' do
        post member_notifications_url, params: { member_notification: valid_attributes }
        expect(response).to(redirect_to(member_notification_url(MemberNotification.last)))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new MemberNotification' do
        expect do
          post(member_notifications_url, params: { member_notification: invalid_attributes })
        end.to(change(MemberNotification, :count).by(0))
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post member_notifications_url, params: { member_notification: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested member_notification' do
        member_notification = MemberNotification.create!(valid_attributes)
        patch member_notification_url(member_notification), params: { member_notification: new_attributes }
        member_notification.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the member_notification' do
        member_notification = MemberNotification.create!(valid_attributes)
        patch member_notification_url(member_notification), params: { member_notification: new_attributes }
        member_notification.reload
        expect(response).to(redirect_to(member_notification_url(member_notification)))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        member_notification = MemberNotification.create!(valid_attributes)
        patch member_notification_url(member_notification), params: { member_notification: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested member_notification' do
      member_notification = MemberNotification.create!(valid_attributes)
      expect do
        delete(member_notification_url(member_notification))
      end.to(change(MemberNotification, :count).by(-1))
    end

    it 'redirects to the member_notifications list' do
      member_notification = MemberNotification.create!(valid_attributes)
      delete member_notification_url(member_notification)
      expect(response).to(redirect_to(member_notifications_url))
    end
  end
end
